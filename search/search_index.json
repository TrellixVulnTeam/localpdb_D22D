{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"localpdb localpdb provides a simple framework to store the local mirror of the protein structures available in the PDB database and other related resources. The underlying data can be conveniently browsed and queried with the pandas.DataFrame structures. Update mechanism allows to follow the weekly PDB releases while retaining the possiblity to access previous data versions. You may find localpdb particularly useful if you: already use Biopython Bio.PDB.PDBList or similar modules and tools like CCPDB , build custom protein datasets based on multiple criteria, e.g. for machine learning purposes, create pipelines based on the multiple or all available protein structures, are a fan of pandas DataFrames . Overview To find more about the package and its functionalities please follow the docs . Installation pip install localpdb Setup the database and sync protein structures in the mmCIF format: localpdb_setup -db_path /path/to/localpdb --fetch_cif More information on the setup options are available via docs . Examples Find number of entries added to the PDB every year from localpdb import PDB lpdb = PDB ( db_path = '/path/to/your/localpdb' ) lpdb . entries = lpdb . entries . query ( 'deposition_date.dt.year >= 2015 & deposition_date.dt.year <= 2020' ) df = lpdb . entries . groupby ( by = [ 'method' , lpdb . entries . deposition_date . dt . year ])[ 'mmCIF_fn' ] . count () . reset_index () sns . barplot ( data = df , x = 'deposition_date' , y = 'mmCIF_fn' , hue = 'method' ) Create a custom dataset of protein chains Select: human SAM-dependent methyltransferases , solved with X-ray diffraction , with resolution below 2.5 Angstrom deposited after 2010 . remove the sequence redundancy at 90% , # Install plugins providing additional data localpdb_setup -db_path /path/to/your/localpdb -plugins SIFTS ECOD PDBClustering from localpdb import PDB import gzip lpdb . entries = lpdb . entries . query ( 'type == \"prot\"' ) # Protein structures lpdb . entries = lpdb . entries . query ( 'method == \"diffraction\"' ) # solved with X-ray diffraction lpdb . entries = lpdb . entries . query ( 'resolution <= 2.5' ) # with resolution below 2.5A lpdb . entries = lpdb . entries . query ( 'deposition_date.dt.year >= 2010' ) # added after 2010 lpdb . chains = lpdb . chains . query ( 'ncbi_taxid == \"9606\"' ) # human proteins lpdb . ecod = lpdb . ecod . query ( 't_name == \"S-adenosyl-L-methionine-dependent methyltransferases\"' ) # SAM dependent methyltransferases # Remove redundancy (select only representative structure from each sequence cluster) lpdb . load_clustering_data ( redundancy = 90 ) lpdb . chains = lpdb . chains [ lpdb . chains [ 'clust-90' ] . notnull ()] representative = lpdb . chains . groupby ( by = 'clust-90' )[ 'resolution' ] . idxmin () lpdb . chains = lpdb . chains . loc [ representative ] lpdb . chains . to_csv ( 'dataset.csv' ) # Save dataset Advanced examples Assessing conformational variability from the ensemble of structures of Sars-COV main protease. To be continued... Acknowledgments This work was supported by the National Science Centre grant 2017/27/N/NZ1/00716","title":"Home"},{"location":"#localpdb","text":"localpdb provides a simple framework to store the local mirror of the protein structures available in the PDB database and other related resources. The underlying data can be conveniently browsed and queried with the pandas.DataFrame structures. Update mechanism allows to follow the weekly PDB releases while retaining the possiblity to access previous data versions. You may find localpdb particularly useful if you: already use Biopython Bio.PDB.PDBList or similar modules and tools like CCPDB , build custom protein datasets based on multiple criteria, e.g. for machine learning purposes, create pipelines based on the multiple or all available protein structures, are a fan of pandas DataFrames .","title":"localpdb"},{"location":"#overview","text":"To find more about the package and its functionalities please follow the docs .","title":"Overview"},{"location":"#installation","text":"pip install localpdb Setup the database and sync protein structures in the mmCIF format: localpdb_setup -db_path /path/to/localpdb --fetch_cif More information on the setup options are available via docs .","title":"Installation"},{"location":"#examples","text":"","title":"Examples"},{"location":"#find-number-of-entries-added-to-the-pdb-every-year","text":"from localpdb import PDB lpdb = PDB ( db_path = '/path/to/your/localpdb' ) lpdb . entries = lpdb . entries . query ( 'deposition_date.dt.year >= 2015 & deposition_date.dt.year <= 2020' ) df = lpdb . entries . groupby ( by = [ 'method' , lpdb . entries . deposition_date . dt . year ])[ 'mmCIF_fn' ] . count () . reset_index () sns . barplot ( data = df , x = 'deposition_date' , y = 'mmCIF_fn' , hue = 'method' )","title":"Find number of entries added to the PDB every year"},{"location":"#create-a-custom-dataset-of-protein-chains","text":"Select: human SAM-dependent methyltransferases , solved with X-ray diffraction , with resolution below 2.5 Angstrom deposited after 2010 . remove the sequence redundancy at 90% , # Install plugins providing additional data localpdb_setup -db_path /path/to/your/localpdb -plugins SIFTS ECOD PDBClustering from localpdb import PDB import gzip lpdb . entries = lpdb . entries . query ( 'type == \"prot\"' ) # Protein structures lpdb . entries = lpdb . entries . query ( 'method == \"diffraction\"' ) # solved with X-ray diffraction lpdb . entries = lpdb . entries . query ( 'resolution <= 2.5' ) # with resolution below 2.5A lpdb . entries = lpdb . entries . query ( 'deposition_date.dt.year >= 2010' ) # added after 2010 lpdb . chains = lpdb . chains . query ( 'ncbi_taxid == \"9606\"' ) # human proteins lpdb . ecod = lpdb . ecod . query ( 't_name == \"S-adenosyl-L-methionine-dependent methyltransferases\"' ) # SAM dependent methyltransferases # Remove redundancy (select only representative structure from each sequence cluster) lpdb . load_clustering_data ( redundancy = 90 ) lpdb . chains = lpdb . chains [ lpdb . chains [ 'clust-90' ] . notnull ()] representative = lpdb . chains . groupby ( by = 'clust-90' )[ 'resolution' ] . idxmin () lpdb . chains = lpdb . chains . loc [ representative ] lpdb . chains . to_csv ( 'dataset.csv' ) # Save dataset","title":"Create a custom dataset of protein chains"},{"location":"#advanced-examples","text":"Assessing conformational variability from the ensemble of structures of Sars-COV main protease. To be continued...","title":"Advanced examples"},{"location":"#acknowledgments","text":"This work was supported by the National Science Centre grant 2017/27/N/NZ1/00716","title":"Acknowledgments"},{"location":"api/","text":"","title":"Api"},{"location":"basics/","text":"Basic usage Warning Please follow the installation steps before trying to run localpdb Once localpdb is setup in the preferred directory you can load the underlying data: from localpdb import PDB lpdb = PDB ( db_path = '/path/to/localpdb' , version = 'latest' ) The lpdb object contains two main attributes: lpdb.entries - protein entries available in the loaded PDB data, lpdb.chains - individual protein chains available in the loaded PDB data. Example lpdb.entries pdb sequence deposition_date resolution method 2lje_A 2lje GSSHHHHHHSSGLVPRGSHMK... 2011-09-11 00:00:00 nan NMR 5qc9_A 5qc9 ILPDSVDWREKGCVTEVKYQG... 2017-08-04 00:00:00 2 diffraction 1yxj_B 1yxj MPCPQDWIWHGENCYLFSSGS... 2005-02-22 00:00:00 1.78 diffraction 4d6w_C 4d6w YLSIAFPENTKLDWKPVTKNT... 2014-11-18 00:00:00 3.6 diffraction 5wln_K 5wln ENSGGNAFVPAGNQQEAHWTI... 2017-07-27 00:00:00 3.57 EM ... ... ... ... ... ...","title":"Basic usage"},{"location":"basics/#basic-usage","text":"Warning Please follow the installation steps before trying to run localpdb Once localpdb is setup in the preferred directory you can load the underlying data: from localpdb import PDB lpdb = PDB ( db_path = '/path/to/localpdb' , version = 'latest' ) The lpdb object contains two main attributes: lpdb.entries - protein entries available in the loaded PDB data, lpdb.chains - individual protein chains available in the loaded PDB data. Example lpdb.entries pdb sequence deposition_date resolution method 2lje_A 2lje GSSHHHHHHSSGLVPRGSHMK... 2011-09-11 00:00:00 nan NMR 5qc9_A 5qc9 ILPDSVDWREKGCVTEVKYQG... 2017-08-04 00:00:00 2 diffraction 1yxj_B 1yxj MPCPQDWIWHGENCYLFSSGS... 2005-02-22 00:00:00 1.78 diffraction 4d6w_C 4d6w YLSIAFPENTKLDWKPVTKNT... 2014-11-18 00:00:00 3.6 diffraction 5wln_K 5wln ENSGGNAFVPAGNQQEAHWTI... 2017-07-27 00:00:00 3.57 EM ... ... ... ... ... ...","title":"Basic usage"},{"location":"lpdb/","text":"localpdb.PDB() Arguments Argument Description db_path location of the localpdb database version version of the localpdb database to load (default: version='latest' ) auto_filter automatically propagate selections performed on any of the DataFrames to other DataFrames (default: auto_filter=True ). See example below for more information. plugins Names of the plugins to load Example from localpdb import PDB lpdb = PDB ( db_path = '/ssd/db/localpdb' , version = 'latest' , auto_filter = True ) lpdb . entries = lpdb . entries . query ( lpdb . entries . query ( 'method == \"diffraction\"' )) lpdb.entries was updated and since auto_filter=True the selection will be also propagated to lpdb.chains . In other words lpdb.chains will contain only the chains corresponding to the entries present in lpdb.entries . Attributes Attribute Description entries pandas.DataFrame containing all entries available in the loaded PDB release. chains pandas.DataFrame containing all chains (polymer entity instances) in the loaded PDB release. version timestamp of the loaded PDB data, in the format YYYYMMDD (e.g. 20210507 ) Methods Method Description reset() Resets all selections performed on any of the DataFrames and restores the initial state of PDB object. load_plugin(plugin='Name') Loads plugins and its data. select_updates(mode='am+') Selects only the entries that were either added ( mode='a' ) or ( mode='m' ) or both ( mode='am' ) in the latest PDB weekly release. In mode='am+' updates with respect to the previous localpdb version will be loaded.","title":"localpdb.PDB"},{"location":"lpdb/#arguments","text":"Argument Description db_path location of the localpdb database version version of the localpdb database to load (default: version='latest' ) auto_filter automatically propagate selections performed on any of the DataFrames to other DataFrames (default: auto_filter=True ). See example below for more information. plugins Names of the plugins to load Example from localpdb import PDB lpdb = PDB ( db_path = '/ssd/db/localpdb' , version = 'latest' , auto_filter = True ) lpdb . entries = lpdb . entries . query ( lpdb . entries . query ( 'method == \"diffraction\"' )) lpdb.entries was updated and since auto_filter=True the selection will be also propagated to lpdb.chains . In other words lpdb.chains will contain only the chains corresponding to the entries present in lpdb.entries .","title":"Arguments"},{"location":"lpdb/#attributes","text":"Attribute Description entries pandas.DataFrame containing all entries available in the loaded PDB release. chains pandas.DataFrame containing all chains (polymer entity instances) in the loaded PDB release. version timestamp of the loaded PDB data, in the format YYYYMMDD (e.g. 20210507 )","title":"Attributes"},{"location":"lpdb/#methods","text":"Method Description reset() Resets all selections performed on any of the DataFrames and restores the initial state of PDB object. load_plugin(plugin='Name') Loads plugins and its data. select_updates(mode='am+') Selects only the entries that were either added ( mode='a' ) or ( mode='m' ) or both ( mode='am' ) in the latest PDB weekly release. In mode='am+' updates with respect to the previous localpdb version will be loaded.","title":"Methods"},{"location":"lpdb_chains/","text":"localpdb.PDB.chains Description Column Description pdb PDB identifier, corresponds with lpdb.entries DataFrame sequence Protein sequence deposition_date Date of deposition to PDB resolution Resolution (available for methods: diffraction , EM ) method Method of structure determination ( diffraction , EM , NMR ) fn Filename of the extracted structure of the chain (requires PDBChain plugin) ncbi_taxid NCBI taxonomy identifier (requires SIFTS plugin) Warning Sequence available in the sequence column does not necceserily match the sequence in the protein structure. The mapping between these can be obtained with the PDBSeqresMapper plugin. In case of multiple NCBI taxonomy identifiers are mapped to a protein chain, only the first one is presented. Example lpdb.chains pdb sequence deposition_date resolution method 4ctg_AU 4ctg VTNVGEDGEPGETEPRHALSPVDMHVHTDVSFLLDRFFDVETLE.... 2014-03-13 00:00:00 17 EM 5aol_B 5aol SSSVPSQKTYQGSYGFRLGFLHSGTAKSVTC... 2015-09-10 00:00:00 1.5 diffraction 1awt_F 1awt VNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGF... 1997-10-05 00:00:00 2.55 diffraction 5bts_A 5bts GIVEQCCTSICSLYQLENYCN 2015-06-03 00:00:00 1.77 diffraction 3v4d_E 3v4d LYFQGHMPKSVIIPAGSSAPLAPFVPGTLADGVVYVSGTLAFD.... 2011-12-14 00:00:00 1.95 diffraction","title":"localpdb.PDB.chains"},{"location":"lpdb_chains/#description","text":"Column Description pdb PDB identifier, corresponds with lpdb.entries DataFrame sequence Protein sequence deposition_date Date of deposition to PDB resolution Resolution (available for methods: diffraction , EM ) method Method of structure determination ( diffraction , EM , NMR ) fn Filename of the extracted structure of the chain (requires PDBChain plugin) ncbi_taxid NCBI taxonomy identifier (requires SIFTS plugin) Warning Sequence available in the sequence column does not necceserily match the sequence in the protein structure. The mapping between these can be obtained with the PDBSeqresMapper plugin. In case of multiple NCBI taxonomy identifiers are mapped to a protein chain, only the first one is presented. Example lpdb.chains pdb sequence deposition_date resolution method 4ctg_AU 4ctg VTNVGEDGEPGETEPRHALSPVDMHVHTDVSFLLDRFFDVETLE.... 2014-03-13 00:00:00 17 EM 5aol_B 5aol SSSVPSQKTYQGSYGFRLGFLHSGTAKSVTC... 2015-09-10 00:00:00 1.5 diffraction 1awt_F 1awt VNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGF... 1997-10-05 00:00:00 2.55 diffraction 5bts_A 5bts GIVEQCCTSICSLYQLENYCN 2015-06-03 00:00:00 1.77 diffraction 3v4d_E 3v4d LYFQGHMPKSVIIPAGSSAPLAPFVPGTLADGVVYVSGTLAFD.... 2011-12-14 00:00:00 1.95 diffraction","title":"Description"},{"location":"lpdb_entries/","text":"localpdb.PDB.entries Description Column Description type Type of entry ( prot , prot-nuc ) method Method of structure determination ( diffraction , EM , NMR ) resolution Resolution (available for methods: diffraction , EM ) deposition_date Date of deposition to PDB pdb_fn Filename of the structure in the PDB format (if structure mirror is available) mmCIF_fn Filename of the structure in the mmCIF format (if structure mirror is available) biounit Filename of the biological assembly generated with the MakeMultimer.py script (requires Biounit plugin) socket_7.* Filename of the Socket (program detecting coiled-coil domains) output Biounit and Socket plugins) dssp Filename of the DSSP file (requires DSSP plugin) Warning Some large protein structures will not be available in the PDB format - in such case there'll be a np.nan value in the pdb_fn column. Currently entries containing solely the nucleic acids are not shown in the lpdb.entries Example lpdb.entries type method resolution deposition_date pdb_fn 4fd7 prot diffraction 1.8 2012-05-26 00:00:00 /ssd/db/localpdb/mirror/pdb/fd/pdb4fd7.ent.gz 6gz5 prot-nuc EM 3.5 2018-07-03 00:00:00 not_compatible 6efv prot diffraction 2.341 2018-08-17 00:00:00 /ssd/db/localpdb/mirror/pdb/ef/pdb6efv.ent.gz 3eqb prot diffraction 2.62 2008-09-30 00:00:00 /ssd/db/localpdb/mirror/pdb/eq/pdb3eqb.ent.gz 3lq4 prot diffraction 1.98 2010-02-08 00:00:00 /ssd/db/localpdb/mirror/pdb/lq/pdb3lq4.ent.gz ... ... ... ... ... ...","title":"localpdb.PDB.entries"},{"location":"lpdb_entries/#description","text":"Column Description type Type of entry ( prot , prot-nuc ) method Method of structure determination ( diffraction , EM , NMR ) resolution Resolution (available for methods: diffraction , EM ) deposition_date Date of deposition to PDB pdb_fn Filename of the structure in the PDB format (if structure mirror is available) mmCIF_fn Filename of the structure in the mmCIF format (if structure mirror is available) biounit Filename of the biological assembly generated with the MakeMultimer.py script (requires Biounit plugin) socket_7.* Filename of the Socket (program detecting coiled-coil domains) output Biounit and Socket plugins) dssp Filename of the DSSP file (requires DSSP plugin) Warning Some large protein structures will not be available in the PDB format - in such case there'll be a np.nan value in the pdb_fn column. Currently entries containing solely the nucleic acids are not shown in the lpdb.entries Example lpdb.entries type method resolution deposition_date pdb_fn 4fd7 prot diffraction 1.8 2012-05-26 00:00:00 /ssd/db/localpdb/mirror/pdb/fd/pdb4fd7.ent.gz 6gz5 prot-nuc EM 3.5 2018-07-03 00:00:00 not_compatible 6efv prot diffraction 2.341 2018-08-17 00:00:00 /ssd/db/localpdb/mirror/pdb/ef/pdb6efv.ent.gz 3eqb prot diffraction 2.62 2008-09-30 00:00:00 /ssd/db/localpdb/mirror/pdb/eq/pdb3eqb.ent.gz 3lq4 prot diffraction 1.98 2010-02-08 00:00:00 /ssd/db/localpdb/mirror/pdb/lq/pdb3lq4.ent.gz ... ... ... ... ... ...","title":"Description"},{"location":"overview/","text":"Overview Basic setup and functionalities The simplest localpdb setup mode can be obtained by running the following command. This will give an access to the lpdb.entries and lpdb.chains dataframes. Example localpdb_setup -db_path /path/to/localpdb In order to sync the protein structures (either in PDB or mmCIF formats), you can rerun localpdb_setup at any time with following parameters: Example localpdb_setup -db_path /path/to/localpdb --fetch_pdb --fetch_cif You can also install plugins providing additional data with localpdb_setup (also at any time, not necessarily during the initial setup): Example localpdb_setup -db_path /path/to/localpdb -plugins Plugin1 Plugin2 Updates Every week new entries are added to the PDB database, some are removed or modified. To track these changes you can easily update your localpdb database (this'll also update any installed plugins): Example localpdb_setup -db_path /path/to/localpdb --update","title":"Overview"},{"location":"overview/#overview","text":"","title":"Overview"},{"location":"overview/#basic-setup-and-functionalities","text":"The simplest localpdb setup mode can be obtained by running the following command. This will give an access to the lpdb.entries and lpdb.chains dataframes. Example localpdb_setup -db_path /path/to/localpdb In order to sync the protein structures (either in PDB or mmCIF formats), you can rerun localpdb_setup at any time with following parameters: Example localpdb_setup -db_path /path/to/localpdb --fetch_pdb --fetch_cif You can also install plugins providing additional data with localpdb_setup (also at any time, not necessarily during the initial setup): Example localpdb_setup -db_path /path/to/localpdb -plugins Plugin1 Plugin2","title":"Basic setup and functionalities"},{"location":"overview/#updates","text":"Every week new entries are added to the PDB database, some are removed or modified. To track these changes you can easily update your localpdb database (this'll also update any installed plugins): Example localpdb_setup -db_path /path/to/localpdb --update","title":"Updates"},{"location":"plugins/","text":"","title":"Plugins"},{"location":"setup/","text":"Installation Installing localpdb Setup of the localpdb is simple and straightforward. Recommended installation way is to use pip (this will also make the localpdb_setup script available in your PATH ): pip install localpdb To clone the newest version of localpdb you can instally directly from the repository: pip install git+https://github.com/labstructbioinf/localpdb.git Setting up localpdb Once installed localpdb you need to setup the database in a suitable directory: localpdb_setup -db_path /path/to/localpdb Setup script provides additional options if you want to additionally keep the updatable archive of the raw protein structures in various formats or to select the desired PDB mirror: Option Description -db_path PATH Path to store the localpdb database -mirror MIRROR PDB mirror used to download the raw files. Valid options are: - rcsb (RCSB PDB - US - default ), - pdbe (PDBe - UK), - pdbj (PDBj - Japan) -plugins PLUGINS Install plugins fetching additional data. More on plugins. --fetch_pdb Download the protein structures in the PDB format --fetch_cif Download the protein structures in the mmCIF format --update Update localpdb database instead of setting up. More on updates. Example Setting up localpdb in directory /ssd/db/localpdb , syncing structures in PDB and mmCIF formats and installing plugins PDBClustering and ECOD : localpdb_setup -db_path /ssd/db/localpdb --fetch_pdb --fetch_cif -plugins ECOD PDBClustering","title":"Setup"},{"location":"setup/#installation","text":"","title":"Installation"},{"location":"setup/#installing-localpdb","text":"Setup of the localpdb is simple and straightforward. Recommended installation way is to use pip (this will also make the localpdb_setup script available in your PATH ): pip install localpdb To clone the newest version of localpdb you can instally directly from the repository: pip install git+https://github.com/labstructbioinf/localpdb.git","title":"Installing localpdb"},{"location":"setup/#setting-up-localpdb","text":"Once installed localpdb you need to setup the database in a suitable directory: localpdb_setup -db_path /path/to/localpdb Setup script provides additional options if you want to additionally keep the updatable archive of the raw protein structures in various formats or to select the desired PDB mirror: Option Description -db_path PATH Path to store the localpdb database -mirror MIRROR PDB mirror used to download the raw files. Valid options are: - rcsb (RCSB PDB - US - default ), - pdbe (PDBe - UK), - pdbj (PDBj - Japan) -plugins PLUGINS Install plugins fetching additional data. More on plugins. --fetch_pdb Download the protein structures in the PDB format --fetch_cif Download the protein structures in the mmCIF format --update Update localpdb database instead of setting up. More on updates. Example Setting up localpdb in directory /ssd/db/localpdb , syncing structures in PDB and mmCIF formats and installing plugins PDBClustering and ECOD : localpdb_setup -db_path /ssd/db/localpdb --fetch_pdb --fetch_cif -plugins ECOD PDBClustering","title":"Setting up localpdb"}]}